#################
# Waits for the named VM to start (or optionally shutdown).  This script will block until the VM returns
# true (assuming the true command exists on the path) - meaning it will work on OS X and Linux VMs.
#
#!/bin/bash
if [ "${1}" == "-s" ]; then SHUTDOWN="yes"; shift; else unset SHUTDOWN; fi
if [ "${1}" == "-n" ]; then PING_HOST="${2}"; shift 2; else unset PING_HOST; fi
echo "${2-300}" | grep '^[0-9]\+$' &>/dev/null && [ -n "${1}" ] || {
    echo "Usage: ${0} [-s|-n <HOST | IP>] <ID | NAME> [timeout]"
    echo ""
    echo "       -s indicates to wait for the VM to stop (default is wait for start)"
    echo "       -n indicates to wait until the given host or IP address is accessible"
    echo "       timeout is in seconds - defaults to 300"
    exit 1
}
VM_NAME="${1}"

# Check for the VM
prlctl status "${VM_NAME}" >/dev/null || exit $?

[ -z "${SHUTDOWN}" ] && echo "Waiting for VM..." || echo "Waiting for VM to stop..."
COUNT=0
while [ ${COUNT} -lt ${2-300} ]; do
    COUNT=$((COUNT+1))
    if [ -n "${PING_HOST}" ]; then
        ( prlctl exec "${VM_NAME}" "ping -q -c1 -t1 ${PING_HOST} &>/dev/null" ) &>/dev/null && break
    elif [ -z "${SHUTDOWN}" ]; then
        # TODO: Do a different check if it is a Windows VM
        ( prlctl exec "${VM_NAME}" 'true' ) &>/dev/null && break
    else
        ( prlctl status "${VM_NAME}" | grep ' stopped$' ) &>/dev/null && break
    fi
    sleep 1
done
[ ${COUNT} -lt ${2-300} ] || { echo "Timed out waiting for agent"; exit 2; }
[ -z "${SHUTDOWN}" ] && echo "VM is ready." || echo "VM is stopped."
